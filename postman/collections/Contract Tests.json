{
	"info": {
		"_postman_id": "4805f5f6-a300-4eaf-a10f-004a6bcda37e",
		"name": "Contract Tests",
		"description": "### Consumer-driven Contract Testing\n\nA consumer can create a collection like this one and then either in the same workspace, in a different workspace within the same organization, or in a partner workspace (if two different companies are collaborating), users can communicate a contract, collaborate around it, iterate over it, and implement an end-to-end process workflow which encapsulates all of these items.\n\n**Note that it is the recommendation of Postman that API specifications be used to define API contracts.** Still, many organizations are either still \"code first\" (instead of \"API first\") or are in some state of flux from the latter to the former.\n\n<img src=\"https://content.pstmn.io/b8a8cb2d-ce72-4d73-9846-75c1969c0caa/MV9zLXVqckdReVpzekJjU2RZM1BDeWJ3LnBuZw==\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "16952209-4805f5f6-a300-4eaf-a10f-004a6bcda37e"
	},
	"item": [
		{
			"name": "Response Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8abe6cf-dbc1-4ebb-b9e8-185da1da9952",
						"exec": [
							"// INITIAL VARIABLES",
							"responseJson                = pm.response.json();",
							"validNetworksList           = pm.collectionVariables.get('validNetworksList').split(',');",
							"requiredNetworkProperties   = pm.collectionVariables.get('requiredNetworkProperties').split(',');",
							"optionalNetworkProperties   = pm.collectionVariables.get('optionalNetworkProperties').split(',');",
							"        ",
							"",
							"// CONSUMER-DRIVEN CONTRACT TESTS",
							"// ------------------------------",
							"",
							"// CONTRACT TEST: At the root level, there can only be a network property",
							"pm.test(\"Response does not contain other properties at the root level\", function () {",
							"    // There cannot be other properties at the root level",
							"    pm.expect(Object.keys(responseJson)).to.include.members(['network']).and.to.have.length(1);",
							"});",
							"",
							"// CONTRACT TEST: The network property must be a list of network objects.",
							"pm.test(\"Response contains a list of networks which contains at least one network\", function () {",
							"    pm.expect(responseJson.network).to.be.an('array').with.length.greaterThan(0);",
							"});",
							"",
							"",
							"// Test each network item",
							"responseJson.network.forEach( function (network, index) {",
							"",
							"    // CONTRACT TESTS: Test mandatory response properities",
							"    pm.test(\"Network \" + index + \" contains all required properties\", function () {",
							"        pm.expect(Object.keys(network)).to.include.members(requiredNetworkProperties);",
							"    });",
							"",
							"    pm.test(\"Network \" + index + \" contains a name property with a string value\", function () {",
							"        pm.expect(network.name).and.to.be.a('string')",
							"    });",
							"",
							"    pm.test(\"Network \" + index + \"'s name (\" + network.name + \") is in valid network list: \" + validNetworksList, function () {",
							"        pm.expect(network.name).to.be.oneOf(validNetworksList);",
							"    });",
							"",
							"    pm.test(\"Network \" + index + \" contains a users property with an number value\", function () {",
							"        pm.expect(network.users).and.to.be.a('number');",
							"    });",
							"",
							"    pm.test(\"Network \" + index + \" contains a properly formatted instanceId\", function () {",
							"",
							"        // Regular expresssion for a string with the following format:",
							"        // dac5eac9-148d-a32e-b76b-3edee9da28f7",
							"        instanceIdRe = /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/g;",
							"",
							"        pm.expect(network.instanceId).to.be.a('string');",
							"        pm.expect(network.instanceId.match(instanceIdRe)).to.have.length(1);",
							"    });",
							"",
							"    // CONTRACT TEST: Test optional response properities",
							"    if('average_minutes_per_user' in network) {",
							"        pm.test(\"Network \" + index + \" contains an average_minutes_per_user property with an number value\", function () {",
							"",
							"            pm.expect(network.average_minutes_per_user).to.be.a('number');",
							"        });",
							"    }",
							"",
							"    // Extra tests for the remaining fields in the example response",
							"    pm.test(\"Network \" + index + \" contains a monthly_active_users property with an number value\", function () {",
							"        ",
							"        pm.expect(network.monthly_active_users).to.be.a('number');",
							"    });",
							"",
							"    pm.test(\"Network \" + index + \" contains a weekly_active_users property with an number value\", function () {",
							"",
							"        pm.expect(network.weekly_active_users).to.be.a('number');",
							"    });",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3e958d20-0fa2-4503-acf1-8d9237ca1416",
						"exec": [
							"useResponsesWithErrors      = pm.collectionVariables.get('useResponsesWithErrors');",
							"",
							"",
							"if(useResponsesWithErrors == 'true'){",
							"    pm.request.headers.insert({ \"key\": \"x-mock-response-name\",",
							"                                \"value\": \"Tests Fail\" ",
							"    });",
							"}",
							"else {",
							"    pm.request.headers.insert({ \"key\": \"x-mock-response-name\",",
							"                                \"value\": \"Tests Pass\" ",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a0b047f8-fb7f-459a-8f1a-ef8cc8127222",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/network",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"network"
					]
				},
				"description": "The `/network` endpoint returns a network report with statistics on user activity, resource management, and found security risks. \nThe response contains an array of network information containing the `name`, `id`, `owner` and `uid` of each network."
			},
			"response": [
				{
					"id": "a15cc644-95ee-40cd-8a2d-de4fbb54a2d1",
					"name": "Tests Fail",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/network",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"network"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"network\": [\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n      \"name\": \"Instance eu-1\",\n      \"users\": 631643,\n      \"monthly_active_users\": 5000,\n      \"weekly_active_users\": 3333,\n      \"average_minutes_per_user\": 19\n    },\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-90586jfke0r9\",\n      \"name\": \"Instance au-1\",\n      \"user\": 477,\n      \"monthly_active_users\": 35,\n      \"weekly_active_users\": 22,\n      \"average_minutes_per_user\": 10\n    },\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-cnu94308rcn8\",\n      \"name\": \"Instance ca-1\",\n      \"users\": 235436,\n      \"monthly_active_users\": 7890,\n      \"weekly_active_users\": 567,\n      \"average_minutes_per_user\": \"eleven\"\n    }\n  ]\n}"
				},
				{
					"id": "a1b854d4-de2a-414b-84e8-35856941afa1",
					"name": "Tests Pass",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/network",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"network"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"network\": [\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n      \"name\": \"Instance eu-1\",\n      \"users\": 631643,\n      \"monthly_active_users\": 5000,\n      \"weekly_active_users\": 3333,\n      \"average_minutes_per_user\": 19\n    },\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-90586jfke0r9\",\n      \"name\": \"Instance us-1\",\n      \"users\": 477,\n      \"monthly_active_users\": 35,\n      \"weekly_active_users\": 22,\n      \"average_minutes_per_user\": 10\n    },\n    {\n      \"instanceId\": \"dac5eac9-148d-a32e-b76b-cnu94308rcn8\",\n      \"name\": \"Instance ca-1\",\n      \"users\": 235436,\n      \"monthly_active_users\": 7890,\n      \"weekly_active_users\": 567,\n      \"average_minutes_per_user\": 11\n    }\n  ]\n}"
				}
			]
		},
		{
			"name": "Request Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d0106a4-9c56-4fc7-b602-91dfcc0d8879",
						"exec": [
							"// Initial values",
							"requestJson = JSON.parse(pm.request.body.raw);",
							"",
							"// CONTRACT TEST: Validate that the request body contained JSON (1)",
							"pm.test(\"Body contains JSON\", function () {",
							"",
							"    contentTypeHeader = pm.request.headers.find(header => header.key = \"Content-Type\");",
							"    pm.expect(contentTypeHeader.value).to.equal('application/json');",
							"});",
							"",
							"// CONTRACT TEST: Validate that the request body contained JSON (2)",
							"pm.test(\"JSON is properly formed\", function () {",
							"    // Line 1 (needed there) will throw an exception if the body is not properly formatted JSON.",
							"    // Noting this test here as an auditable part of the test record.",
							"    pm.expect(true);",
							"});",
							"",
							"// Checking for string format: \"FirstName LastName\"",
							"pm.test(\"Name (\" + requestJson.user.name + \") exists and has format \\\"FirstName LastName\\\"\", function () {",
							"    pm.expect(requestJson.user.name).to.be.a('string');",
							"    pm.expect(requestJson.user.name.split(\" \")).to.have.length(2);",
							"});",
							"",
							"// Checking that \"id\" is a number",
							"pm.test(\"Id (\" + requestJson.user.id + \") exists and is a number\", function () {",
							"    pm.expect(requestJson.user.id).to.be.a('number');",
							"});",
							"",
							"// Check that a \"valid\" email address was used.",
							"",
							"emailAddresRegEx = /\\w+@\\w+.\\w+/g;",
							"pm.test(\"Email (\" + requestJson.user.email + \") address has valid format\", function () {",
							"    pm.expect(requestJson.user.email.match(emailAddresRegEx)).to.have.length(1);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "012e0616-c554-4fbc-b1ab-c31ae1403c2c",
						"exec": [
							"useResponsesWithErrors      = pm.collectionVariables.get('useResponsesWithErrors');",
							"",
							"let errorBody = {",
							"    user: {",
							"        name: \"George\",",
							"        id: 192837,",
							"        email: \"george_vandelayindustries.com\"",
							"    }",
							"};",
							"",
							"let body = {",
							"    user: {",
							"        name: \"George Costanza\",",
							"        id: 192837,",
							"        email: \"george@vandelayindustries.com\"",
							"    }",
							"};",
							"",
							"if(useResponsesWithErrors == 'true'){",
							"    pm.request.headers.insert({ \"key\": \"x-mock-response-name\",",
							"                                \"value\": \"Tests Fail\" ",
							"    });",
							"    ",
							"    body = errorBody;",
							"}",
							"else {",
							"    pm.request.headers.insert({ \"key\": \"x-mock-response-name\",",
							"                                \"value\": \"Tests Pass\" ",
							"    });",
							"}",
							"",
							"pm.variables.set('body', JSON.stringify(body));"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b091af7d-c83b-47e4-a68b-969826cd23cb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/:adminId/user/new",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						":adminId",
						"user",
						"new"
					],
					"variable": [
						{
							"key": "adminId",
							"value": "mollit aliqua exercitation magna dolor",
							"description": "(Required) "
						}
					]
				},
				"description": "This call creates a new network user on the network.  \n\nRequest body should contain a `user` object which should have fields:\n\n<table>\n<tr>\n\t<td>name</td>\n\t<td>Required. Name of the network user</td>\n</tr>\n<tr>\n\t<td>id</td>\n\t<td>\n\tOptional: if the user is already registed in one of our other systems, you may provide the id to keep the details consistent across netowrks.\n\t</td>\n    \n</tr>\n<tr>\n    <td>email</td>\n    <td>Required. Email of the user to be associated with this account.</td>\n</table>\n\nResponse contains a `user` object with all the details related to the created network user."
			},
			"response": [
				{
					"id": "3b076bf7-87dd-4070-aade-81ffc1ce7756",
					"name": "Tests Fail",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"name\": \"George Costanza\",\n    \"id\": \"{{userId}}\",\n    \"email\": \"george@vandelayindustries.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/:adminId/user/new",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								":adminId",
								"user",
								"new"
							],
							"variable": [
								{
									"key": "adminId",
									"value": "mollit aliqua exercitation magna dolor",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"user\": {\n    \"name\": \"George\",\n    \"id\": 192837,\n    \"email\": \"george_vandelayindustries.com\"\n  }\n}"
				},
				{
					"id": "3d46403f-e936-4400-8564-1c45b2e78fb4",
					"name": "Tests Pass",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"name\": \"George Costanza\",\n    \"id\": \"{{userId}}\",\n    \"email\": \"george@vandelayindustries.com\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/:adminId/user/new",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								":adminId",
								"user",
								"new"
							],
							"variable": [
								{
									"key": "adminId",
									"value": "mollit aliqua exercitation magna dolor",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"user\": {\n    \"name\": \"George Costanza\",\n    \"id\": 192837,\n    \"email\": \"george@vandelayindustries.com\"\n  }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c918f9f3-9640-4787-b65d-0847851be83f",
				"type": "text/javascript",
				"exec": [
					"// Generate tests with errors about 20% of the time.",
					"var useResponsesWithErrors = \"false\";",
					"var randomValue = 0",
					"",
					"randomValue = Math.random();",
					"",
					"if(randomValue <= .2) useResponsesWithErrors = \"true\";",
					"else useResponsesWithErrors = \"false\";",
					"",
					"console.log(\"useResponsesWithErrors: \" + useResponsesWithErrors);",
					"pm.collectionVariables.set(\"useResponsesWithErrors\", useResponsesWithErrors);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fb31adc5-641b-40a0-93cd-2fab4b86bffd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "aee883be-c677-4dee-ba63-6d20cabeb332",
			"key": "--- Configuration properties ---",
			"value": "",
			"type": "string"
		},
		{
			"id": "69caed99-7125-47bb-ba56-f85d4d2d1c68",
			"key": "baseUrl",
			"value": "https://cd0c3b1a-ed6a-4844-9f1f-d1cc89bb4ebc.mock.pstmn.io",
			"type": "string"
		},
		{
			"id": "e359e5d9-6a30-4d86-ba6d-bf5506ffe0e0",
			"key": "useResponsesWithErrors",
			"value": "true",
			"type": "string"
		},
		{
			"id": "58cfc3bd-41bf-4686-aab5-89038e25fbd2",
			"key": "--- Demonstration properties: Response Tests ---",
			"value": "",
			"type": "string"
		},
		{
			"id": "6ff80190-7ace-4e21-a903-89df51fe4210",
			"key": "validNetworksList",
			"value": "Instance eu-1,Instance us-1,Instance ca-1"
		},
		{
			"id": "38d57df5-3fbf-43db-b90c-401c362c6683",
			"key": "requiredNetworkProperties",
			"value": "instanceId,name,users",
			"type": "string"
		},
		{
			"id": "a3d0e44f-fda1-41f7-abbb-7840073225a8",
			"key": "optionalNetworkProperties",
			"value": "weekly_active_users,average_minutes_per_user,monthly_active_users",
			"type": "string"
		},
		{
			"id": "6ed6e814-2ad3-479c-a10d-4ec8f926ac71",
			"key": "--- Demonstration properties: Request Tests ---",
			"value": "",
			"type": "string"
		}
	]
}